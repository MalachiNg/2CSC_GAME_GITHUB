[gd_scene load_steps=36 format=3 uid="uid://u3kaare3kvmn"]

[ext_resource type="Texture2D" uid="uid://cul601x4ac6a5" path="res://Food_100%.png" id="2_twwmy"]
[ext_resource type="Texture2D" uid="uid://v267sm7w2kav" path="res://sprite_2.webp" id="2_xkiwi"]
[ext_resource type="Texture2D" uid="uid://6wwa48cueufk" path="res://Food_20%.png" id="3_r15e5"]
[ext_resource type="Texture2D" uid="uid://d4e4ck3x4vsho" path="res://Food_40%.png" id="4_cnpdn"]
[ext_resource type="Texture2D" uid="uid://dyy4hfv4ixlrv" path="res://Food_60%.png" id="5_o2rhu"]
[ext_resource type="Texture2D" uid="uid://bw3gp2ob8ft1y" path="res://Food_80%.png" id="6_55aps"]
[ext_resource type="Texture2D" uid="uid://chn1hesxmptt6" path="res://Food_CRITICAL!.png" id="7_4n7ct"]
[ext_resource type="Texture2D" uid="uid://inrpqikdofed" path="res://1_Heart.png" id="9_bqkfj"]
[ext_resource type="Texture2D" uid="uid://ssmmvbh8con1" path="res://2_Hearts.png" id="10_68afl"]
[ext_resource type="Texture2D" uid="uid://d1cwfojrs0tw8" path="res://white_circle.png" id="11_01ilh"]
[ext_resource type="Texture2D" uid="uid://8b1026u6hws4" path="res://3_Hearts.png" id="11_ihlyc"]
[ext_resource type="AudioStream" uid="uid://c6eiqjqe6183m" path="res://Panting_sound_effect.mp3" id="12_pegyh"]
[ext_resource type="AudioStream" uid="uid://cmhymp4dfrfcv" path="res://dying_sound.mp3" id="13_d82q5"]
[ext_resource type="AudioStream" uid="uid://bt0ypjvetu608" path="res://health_decreased_sound_effect.mp3" id="14_1yuv5"]

[sub_resource type="GDScript" id="GDScript_v763d"]
resource_name = "Player_2.gd"
script/source = "extends Area2D # using a 2D environment. 
@onready var speed: float = 200 # exports \"speed\" as a variable, which can be edited in inspector. 
@onready var food_bars: int = 5
@onready var direction: Vector2 = Vector2.DOWN # as the player is constantly moving in this game.
@onready var health: int = 3
@onready var fuel: int = 0
@onready var is_gaining_health = false
@onready var is_losing_health = false
@onready var is_losing_hunger = false
@onready var touching_mob = false
@onready var min_x = 0 # the minimum x co-ordinate the player can be in as long as they stay in the map.
@onready var max_x = 1152 # the maximum x co-ord
@onready var min_y = 0 # min y co-ord
@onready var max_y = 648 # max y co-ord.
@onready var daytime_process = false
@onready var game_over_run = false
@onready var showing_fuel_bar = 0
@onready var touched_food = false
@onready var food_wait_time : float
@onready var food_timer_num : int
@onready var play_sound_called = false
@onready var Food_100 = preload(\"res://100%_food_texture.png\")
@onready var Food_80 = preload(\"res://80%_food_texture.png\") # this one is the same size (pretty much) as 60, 40 and 20. 
@onready var Food_CRITICAL = preload(\"res://Food_CRITICAL!.png\")
@onready var display_multiplayer_called = false
@onready var Hearts_3 = preload(\"res://3_Hearts.png\") ; @onready var Hearts_2 = preload(\"res://2_Hearts.png\") ; @onready var Hearts_1 = preload(\"res://1_Heart.png\")
@onready var unmute = Global.Unmute 
# this fetches the value of unmute, because it can't change when player is active, so theres no point fetching it every time process wants to run panting.

# Called when the node enters the scene tree for the first time.
func _ready():
	$AnimatedSprite2D.play(\"move_down\") # this line of code makes the AnimatedSprite2D node play the move_down animation to match the velocity. ()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if Global.game_over != true and unmute == true:
		play_panting_sound()
	if game_over_run == false: # to save processing power and increase performance of the game, once the player has died, as no code is needed from it after it's death, due to monitoring of multiplayer game over being done in player 1's script regardless of the order of death, process will only run if player 2 is alive.
		handle_input() #corresponds to a later function, doesn't matter the order of which functions are called, as the computer reads everything before executing it. 
		move_and_animate(delta) # again, corresponds to a later function.
		food()
		Global.update_player_2_position(global_position)
		fuel = Global.global_fuel # ensures that the fuel is always up to date with the corresponding global fuel variable. 
		gain_health()
		display_health()
		critical_food()
		getting_hungry()
		animate_time_of_day()
		$Food_bar_AnimatedSprite2D.global_position = Vector2(1220,-65)
		$Health_bar_AnimatedSprite2D.global_position = Vector2(1220, -20)
		if (Global.day_and_night % 2) == 0:
			display_food_and_health_multiplayer()
		else:
			$Food_Bars_PointLight2D.hide() ; $Health_Bar_PointLight2D.hide()
		
	else:
		return

func handle_input():
	var input_direction = Vector2.ZERO
	
	if Input.is_action_pressed(\"move_up_2\"): # if the input action \"move_up\" as set in project settings, and is activated by w or the up key, then:
		input_direction.y -= 1 # change the \"y\" direction by -1, setting the direction as moving up. 
	if Input.is_action_pressed(\"move_down_2\"): #same as the last one, but for input action \"move_down\". 
		input_direction.y += 1 # change the \"y\" direction by +1 setting the direction to moving down. 
	if Input.is_action_pressed(\"move_left_2\"): # Ok I think it's clear by now...
		input_direction.x -= 1 # change the \"x\" direction by -1, setting the direction to left. 
	if Input.is_action_pressed(\"move_right_2\"): # last one! my fingers are getting sore! yep its definitely obvious by now, I don't need to add this surely...
		input_direction.x += 1 # and finally, change the \"x\" direction by +1, making  the direction right! :D
		
	# But wait! There's more!!!
	if input_direction != Vector2.ZERO: # if no input is detected...
		direction = input_direction.normalized() # ... keep the sprite moving in the same direction! :D
	


func move_and_animate(delta): # the function that codes the animations. 
	position += direction * speed * delta # the position of the sprite is equal to: The pre-existing position multiplied by the direction, so it moves the right way, the speed, so it moves the right amount, and delta, so that the speed moves in accordance to the time between frames, as opposed to the set speed at the start of the code.     
	position.x = clamp(position.x, min_x, max_x)
	position.y = clamp(position.y, min_y, max_y) 
	if direction.x > 0: # if the x direction variable is larger than 0, indicating that the character should move along the x axis, towards the right, then:
		if direction.y > 0: # check if y is greater than 0, which, as in many game programming platforms, (0,0) is the top left of the screen, so that the y-axis is reversed, means that the character will be moving right. As this is within the right section of the code, this means the sprite will move down right.
			$AnimatedSprite2D.play(\"move_down_right\") # as said before, down right.
		elif direction.y < 0: # check to see if player is moving left. (already explained twice)
			$AnimatedSprite2D.play(\"move_up_right\") # move it down left. (wow)
		else: # the only other alternative is if only D is being pressed, so the character is moving only right, so only play the right animation.
			$AnimatedSprite2D.play(\"move_right\") # so yeah move right.
	elif direction.x < 0: # if x is less than 0 however, you should be moving left.
		if direction.y > 0: # as mentioned, given the top left of the screen is (0,0), then y being greater than 0 means that the character is moving down. and because this is within the left section, down left.
			$AnimatedSprite2D.play(\"move_down_left\") # huzzah! move down left!
		elif direction.y < 0: # y is less than zero so moving up, and then left bc of the position.
			$AnimatedSprite2D.play(\"move_up_left\") # Huzzah again! move up left!
		else: # the only other alternative is that only left is being pressed, so therefore...
			$AnimatedSprite2D.play(\"move_left\") # move only left.
	else: # and finally! there are just 2 animation directions unaccounted for!!!
		if direction.y > 0: # only moving down... 
			$AnimatedSprite2D.play(\"move_down\") # moving down!!! YAA!!!! :D
		elif direction.y < 0: # and only moving up!!!
			$AnimatedSprite2D.play(\"move_up\") # UP!!!!

		
func food():
	if food_bars > 5:
		food_bars = 5
	elif food_bars == 5: # the variable can be between 5 and 0, each meaning food is one of 5 levels, 20% apart, respectively.
		$Food_bar_AnimatedSprite2D.play(\"100%\")
	elif food_bars == 4:
		$Food_bar_AnimatedSprite2D.play(\"80%\")
	elif food_bars == 3:
		$Food_bar_AnimatedSprite2D.play(\"60%\")
	elif food_bars == 2:
		$Food_bar_AnimatedSprite2D.play(\"40%\")
	elif food_bars == 1:
		$Food_bar_AnimatedSprite2D.play(\"20%\")
	elif food_bars == 0:
		$Food_bar_AnimatedSprite2D.play(\"CRITICAL!\")
	elif food_bars < 0:
		food_bars = 0
	else:
		pass
		

func critical_food():
	if food_bars == 0:
		# $Food_bar_AnimatedSprite2D.play(\"CRITICAL!\") # this one means 0%, player starts losing health. 
		if is_losing_health == true:
			return
		else:
			is_losing_health = true
			$Food_bar_AnimatedSprite2D.play(\"CRITICAL!\") # this one means 0%, player starts losing health.
			# im going to create a timer node and use that to decrease the health, with it decreasing for every few seconds with critical food. 
			#print(\"test if this works\")
			if Global.Normal_mode == true:
				await get_tree().create_timer(7.0).timeout # waits 7 seconds to decrease health at critical hunger.
			else:
				await get_tree().create_timer(4.0).timeout # in hard mode, health decreases at critical hunger, faster. 
			if unmute == true:
				$Health_Decreased_AudioStreamPlayer.play()
			#print (\"does it work?\")
			# now im going to create a health variable which will be local, and decrease once the 7 second timer ends, so that the health slowly decreases when food is critical.
			if food_bars == 0:
				health -= 1 # decrease health by 1 every 7 seconds .
				is_losing_health = false
			else:
				is_losing_health = false

			
			
func getting_hungry(): # MAYBE CHANGE THIS TO CORRESPOND TO THE DAY AND NIGHT INCREASING DIFFICULTY OVER TIME FOR \"LEVELS\"
	if touched_food == false: # There is a timer that starts right after a food is touched, which then reduces the food_bars, if its already timing, this should be skipped. 
		if is_losing_hunger == true: # This avoids multiple runs of the code.
			return
		else:
			is_losing_hunger = true
			if Global.Normal_mode == true:
				food_wait_time = (25*(1-(Global.day_and_night * 0.05))) # ok so pretty much we multiply the Global.day_and_night variable by 0.05, and subtract this from 1, and multiply the resulting number by the original number of seconds, 25. 
				# so on the first night, this is the equation:
				# 0 * 0.05 = 0, 1 - 0 = 1, 25 * 1 = 25, therefore food_wait_time = 25 seconds. 
				# but on another random time, such as on the 5th day, when day_and_night = 9, 
				# 9 * 0.05 = 0.45, 1 - 0.45 = 0.55, 25 * 0.55 = 13.75, therefore the wait time would be 13.75 seconds. 
				# this section helps the game increase steadily in difficulty, providing an steadily increasing challenge to help excercise the user's brains!
			# this only occurs on the normal difficulty, however, and in hard mode this happens.
			else:
				food_wait_time = (15*(1-(Global.day_and_night * 0.1))) # a far shorter, and more quickly decreasing time to reduce hunger. 
			await get_tree().create_timer(food_wait_time).timeout
			if touched_food == false: # This ensures that during the timer, the player hasn't touched a food and started a new timer.
				food_bars -= 1
				is_losing_hunger = false
			else:
				is_losing_hunger = false
	else:
		return


func display_health():
	if health == 3:
		$Health_bar_AnimatedSprite2D.play(\"3_Hearts\")
	elif health == 2:
		$Health_bar_AnimatedSprite2D.play(\"2_Hearts\")
	elif health == 1:
		$Health_bar_AnimatedSprite2D.play(\"1_Heart\")
	elif health > 3:
		health = 3
		$Health_bar_AnimatedSprite2D.play(\"3_Hearts\")
	else:
		#position.x = 0 ; position.y = 0 # prevents the player from moving, allowing game over sprites to remain still.
		if game_over_run:
			return
		else:
			if unmute == true:
				$Dying_AudioStreamPlayer.play()
			game_over_run = true
			game_over()

func game_over():
	print(\"player 2 has run the died function\")
	$Health_bar_AnimatedSprite2D.hide()
	$Food_bar_AnimatedSprite2D.hide()
	$AnimatedSprite2D.hide()
	$PointLight2D.color = Color.TRANSPARENT
	$Food_Bars_PointLight2D.color = Color.TRANSPARENT
	global_position = Vector2(-1, -1)
	Global.update_player_2_position(global_position)
	Global.update_multiplayer_game_over(Global.multiplayer_game_over+1)

func gain_health():
	if is_gaining_health == true:
		return
	is_gaining_health = true
	if Global.Normal_mode == true:
		await get_tree().create_timer(30+(Global.day_and_night)).timeout # waits 30 seconds, plus 1 more second for he number of days and nights you've survived. This means that health regens on the first night every 30 seconds, then slower as the game progresses, increasing difficulty over time.
	else:
		await get_tree().create_timer(45+(Global.day_and_night)).timeout # if the user has selected hard mode, they regenerate health slower.
	if health < 3 and health != 0 and food_bars != 0: # makes sure that food isn't critical, as food cannot regen at critical.
		health += 1
		is_gaining_health = false
	else:
		return

func _on_body_entered(body):
	if body.is_in_group(\"Mobs\"):
		health -= 1
		if unmute == true:
			$Health_Decreased_AudioStreamPlayer.play()
	elif body.is_in_group(\"Boss_mobs\"):
		health -= 3
	elif body.is_in_group(\"Sleeper_Mobs\"):
		health -= 1
		if unmute == true:
			$Health_Decreased_AudioStreamPlayer.play()

func _on_area_entered(area):
	if area.is_in_group(\"Foods\"):
		food_bars += 1
		touched_food = true
		food_timer_num += 1
		var start_of_timer_num = food_timer_num
		food_wait_time = (25*(1-(Global.day_and_night * 0.05)))
		await get_tree().create_timer(food_wait_time).timeout
		if food_timer_num == start_of_timer_num:
			food_bars -= 1
			touched_food = false
		else:
			return
	elif area.is_in_group(\"Fuels\"):
		Global.update_fuel(fuel+1)
	elif area.is_in_group(\"Bombs\"):
		health -= 2
		speed = 100
		await get_tree().create_timer(2.0).timeout
		speed = 200


func _on_game_over_back_button_pressed():
	Global.update_game_over(false)
	get_tree().change_scene_to_file(\"res://Start_scene.tscn\")
	


func animate_time_of_day():
	if (Global.day_and_night % 2) == 0:
		$PointLight2D.show()
	else:
		$PointLight2D.hide()



func play_panting_sound():
	if play_sound_called:
		return
	else:
		play_sound_called = true
		if (Global.day_and_night % 2) == 0:
			$Panting_AudioStreamPlayer.volume_db = -20
		else:
			$Panting_AudioStreamPlayer.volume_db = -40
		$Panting_AudioStreamPlayer.play()
		await $Panting_AudioStreamPlayer.finished
		play_sound_called = false

func display_food_and_health_multiplayer():
	$Health_Bar_PointLight2D.global_position = Vector2(1220, -20)
	$Food_Bars_PointLight2D.global_position = Vector2(1220,-65)
	if display_multiplayer_called:
		return
	else:
		display_multiplayer_called = true
		if (Global.day_and_night % 2) != 0: # if it is day: (when the code shouldn't run)
			await get_tree().create_timer(30.0).timeout # in order to optimise the code, by waiting until it is night again, the code does not unnecessarily run during the day. 
			display_multiplayer_called = false # but once back into night, this means that the code can continue to be used as normal. 
		else:
			$Health_Bar_PointLight2D.show() ; $Food_Bars_PointLight2D.show()
			if health == 3:
				$Health_Bar_PointLight2D.texture = Hearts_3
			elif health == 2:
				$Health_Bar_PointLight2D.texture = Hearts_2
			elif health == 1:
				$Health_Bar_PointLight2D.texture = Hearts_1
			else:
				$Health_Bar_PointLight2D.hide()
			if food_bars == 5:
				$Food_Bars_PointLight2D.texture = Food_100
			elif food_bars == 4 or food_bars == 3 or food_bars == 2 or food_bars == 1:
				$Food_Bars_PointLight2D.texture = Food_80
			elif food_bars == 0:
				$Food_Bars_PointLight2D.texture = Food_CRITICAL
			else:
				$Food_Bars_PointLight2D.hide()
			display_multiplayer_called = false
				
"

[sub_resource type="AtlasTexture" id="AtlasTexture_6kkaa"]
atlas = ExtResource("2_xkiwi")
region = Rect2(600, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlt18"]
atlas = ExtResource("2_xkiwi")
region = Rect2(800, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_gik46"]
atlas = ExtResource("2_xkiwi")
region = Rect2(900, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_hipgv"]
atlas = ExtResource("2_xkiwi")
region = Rect2(1100, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_unloa"]
atlas = ExtResource("2_xkiwi")
region = Rect2(900, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_fv30f"]
atlas = ExtResource("2_xkiwi")
region = Rect2(1100, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_6262d"]
atlas = ExtResource("2_xkiwi")
region = Rect2(600, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_2lrks"]
atlas = ExtResource("2_xkiwi")
region = Rect2(800, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_pjl18"]
atlas = ExtResource("2_xkiwi")
region = Rect2(600, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_rglkg"]
atlas = ExtResource("2_xkiwi")
region = Rect2(800, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_yqhxw"]
atlas = ExtResource("2_xkiwi")
region = Rect2(600, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_ug1sd"]
atlas = ExtResource("2_xkiwi")
region = Rect2(800, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_qndmx"]
atlas = ExtResource("2_xkiwi")
region = Rect2(900, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_8rsgt"]
atlas = ExtResource("2_xkiwi")
region = Rect2(1100, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_m5r3s"]
atlas = ExtResource("2_xkiwi")
region = Rect2(900, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_hvn4u"]
atlas = ExtResource("2_xkiwi")
region = Rect2(1100, 300, 100, 100)

[sub_resource type="SpriteFrames" id="SpriteFrames_c30tb"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6kkaa")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlt18")
}],
"loop": true,
"name": &"move_down",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_gik46")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hipgv")
}],
"loop": true,
"name": &"move_down_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_unloa")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fv30f")
}],
"loop": true,
"name": &"move_down_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6262d")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_2lrks")
}],
"loop": true,
"name": &"move_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pjl18")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rglkg")
}],
"loop": true,
"name": &"move_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_yqhxw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ug1sd")
}],
"loop": true,
"name": &"move_up",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qndmx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8rsgt")
}],
"loop": true,
"name": &"move_up_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_m5r3s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hvn4u")
}],
"loop": true,
"name": &"move_up_right",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_lgbhs"]
radius = 12.0
height = 24.0

[sub_resource type="SpriteFrames" id="SpriteFrames_egunb"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_twwmy")
}],
"loop": true,
"name": &"100%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_r15e5")
}],
"loop": true,
"name": &"20%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_cnpdn")
}],
"loop": true,
"name": &"40%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("5_o2rhu")
}],
"loop": true,
"name": &"60%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("6_55aps")
}],
"loop": true,
"name": &"80%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("7_4n7ct")
}],
"loop": true,
"name": &"CRITICAL!",
"speed": 5.0
}]

[sub_resource type="SpriteFrames" id="SpriteFrames_s6qwr"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("9_bqkfj")
}],
"loop": true,
"name": &"1_Heart",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("10_68afl")
}],
"loop": true,
"name": &"2_Hearts",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("11_ihlyc")
}],
"loop": true,
"name": &"3_Hearts",
"speed": 5.0
}]

[node name="Player" type="Area2D" groups=["Player"]]
z_index = 3
position = Vector2(582, 325)
scale = Vector2(0.5, 0.5)
script = SubResource("GDScript_v763d")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 3
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_c30tb")
animation = &"move_up_right"
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 13)
shape = SubResource("CapsuleShape2D_lgbhs")
metadata/_edit_group_ = true

[node name="Food_bar_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 5
position = Vector2(-188, -116)
scale = Vector2(0.6, 0.6)
sprite_frames = SubResource("SpriteFrames_egunb")
animation = &"100%"

[node name="Health_bar_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 5
position = Vector2(-188, -100)
scale = Vector2(0.12, 0.12)
sprite_frames = SubResource("SpriteFrames_s6qwr")
animation = &"1_Heart"

[node name="PointLight2D" type="PointLight2D" parent="."]
z_index = 12
scale = Vector2(0.1, 0.1)
color = Color(1, 1, 1, 0.254902)
energy = 4.0
texture = ExtResource("11_01ilh")

[node name="Panting_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("12_pegyh")

[node name="Dying_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("13_d82q5")
volume_db = -40.0

[node name="Health_Decreased_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("14_1yuv5")
volume_db = -20.0

[node name="Health_Bar_PointLight2D" type="PointLight2D" parent="."]
position = Vector2(1220, -20)
scale = Vector2(0.12, 0.12)
texture = ExtResource("11_ihlyc")

[node name="Food_Bars_PointLight2D" type="PointLight2D" parent="."]
scale = Vector2(0.6, 0.6)

[connection signal="area_entered" from="." to="." method="_on_area_entered"]
[connection signal="body_entered" from="." to="." method="_on_body_entered"]
