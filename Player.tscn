[gd_scene load_steps=43 format=3 uid="uid://bepxtddddmlg4"]

[ext_resource type="Texture2D" uid="uid://dos25crvsgib1" path="res://sprite.png" id="1_1bvub"]
[ext_resource type="Texture2D" uid="uid://drl5rd4osik8i" path="res://GAME OVER.png" id="1_itl3j"]
[ext_resource type="Texture2D" uid="uid://cul601x4ac6a5" path="res://Screenshot 2024-08-07 at 1.43.23 PM.png" id="3_bkfbl"]
[ext_resource type="Texture2D" uid="uid://6wwa48cueufk" path="res://Screenshot 2024-08-07 at 1.45.03 PM.png" id="4_picw1"]
[ext_resource type="Texture2D" uid="uid://d4e4ck3x4vsho" path="res://Screenshot 2024-08-07 at 1.44.32 PM.png" id="5_0drxs"]
[ext_resource type="Texture2D" uid="uid://dyy4hfv4ixlrv" path="res://Screenshot 2024-08-07 at 1.43.55 PM.png" id="6_fys3c"]
[ext_resource type="Texture2D" uid="uid://bw3gp2ob8ft1y" path="res://Screenshot 2024-08-07 at 1.43.43 PM.png" id="7_tbmkp"]
[ext_resource type="Texture2D" uid="uid://chn1hesxmptt6" path="res://Screenshot 2024-08-07 at 1.45.37 PM.png" id="8_8iksq"]
[ext_resource type="Texture2D" uid="uid://inrpqikdofed" path="res://1_Heart.png" id="9_g0dnn"]
[ext_resource type="Texture2D" uid="uid://ssmmvbh8con1" path="res://2_Hearts.png" id="10_xohd3"]
[ext_resource type="Texture2D" uid="uid://8b1026u6hws4" path="res://3_Hearts.png" id="11_chapm"]
[ext_resource type="Texture2D" uid="uid://wms05dmnesj0" path="res://Nighttime.png" id="12_fbpde"]
[ext_resource type="Texture2D" uid="uid://d1cwfojrs0tw8" path="res://white_circle.png" id="12_mjkwy"]
[ext_resource type="Texture2D" uid="uid://k8lq8kitd7b3" path="res://Back_Button.png" id="13_11oj3"]
[ext_resource type="Texture2D" uid="uid://rfvm7bwulhle" path="res://Fuel_Left_Bar.png" id="13_naa4u"]
[ext_resource type="AudioStream" uid="uid://c6eiqjqe6183m" path="res://Panting_sound_effect.mp3" id="16_ulpre"]
[ext_resource type="AudioStream" uid="uid://cmhymp4dfrfcv" path="res://dying_sound.mp3" id="17_5xq42"]
[ext_resource type="AudioStream" uid="uid://bt0ypjvetu608" path="res://health_decreased_sound_effect.mp3" id="18_mefyr"]

[sub_resource type="GDScript" id="GDScript_v763d"]
resource_name = "Player.gd"
script/source = "extends Area2D # using a 2D environment. 
@onready var speed: float = 200 # exports \"speed\" as a variable, which can be edited in inspector. 
@onready var food_bars: int = 5
@onready var direction: Vector2 = Vector2.DOWN # as the player is constantly moving in this game.
@onready var health: int = 3
@onready var fuel: int = 0
@onready var is_gaining_health = false
@onready var is_losing_health = false
@onready var is_losing_hunger = false
@onready var touching_mob = false
@onready var min_x = 0 # the minimum x co-ordinate the player can be in as long as they stay in the map.
@onready var max_x = 1152 # the maximum x co-ord
@onready var min_y = 0 # min y co-ord
@onready var max_y = 648 # max y co-ord.
@onready var daytime_process = false
@onready var elapsed_time : float = 0.0
@onready var game_over_run = false
@onready var final_score : float
@onready var showing_fuel_bar = 0
@onready var touched_food = false
@onready var food_wait_time : float
@onready var food_timer_num : int
@onready var nights_survived : int
@onready var ran_game_over = false
@onready var play_sound_called = false

# Called when the node enters the scene tree for the first time.
func _ready():
	if Global.single_player:
		$PointLight2D.hide()
	else:
		$Night_scene_AnimatedSprite2D.hide()
	get_node(\"AnimatedSprite2D\").play(\"move_down\") # get_node can be shown by using a \"$\" sign before the node, so it would be $AnimatedSprite2D, however I used the proper way for the first time, to demonstrate knowledge. this line of code makes the AnimatedSprite2D node play the move_down animation to match the velocity. 
	$Game_over_screen_AnimatedSprite2D.hide()
	$Game_Over_Back_Button.hide()
	$Game_Over_Back_Button.disabled = true
	$Score.hide()
	$Fuel_left_AnimatedSprite2D.hide()
	$Fuel_Left_Label.hide()
	$Nights_survived.hide()
	if Global.single_player == false: 
		$Camera2D.enabled = false
		$Food_bar_AnimatedSprite2D.scale = Vector2(0.6,0.6)
		$Health_bar_AnimatedSprite2D.scale = Vector2(0.12,0.12)
		$Fuel_left_AnimatedSprite2D.scale = Vector2(3, 3)
		$Fuel_Left_Label.scale = Vector2(5, 5)
	else:
		$Camera2D.enabled = true


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if Global.multiplayer_game_over == 2: # checks if both players have died.
		multiplayer_game_over() # runs the multiplayer game over function.
	if game_over_run == false: # checks if player 1 has died. this line increases performace, as in multiplayer game over none of this code, besides the code to check if both players have died, which runs before this regardless of these parameters, is necessary, so is slowing the game down. Additionally, running process without these parameters would get the mobs to follow player 1 when they are dead, which is very dumb and stupid, like how much comment text i've put on this line. s
		handle_input() #corresponds to a later function, doesn't matter the order of which functions are called, as the computer reads everything before executing it. 
		move_and_animate(delta) # again, corresponds to a later function.
		animate_time_of_day()
		food()
		Global.update_player_position(global_position)
		fuel = Global.global_fuel # ensures that the fuel is always up to date with the corresponding global fuel variable. 
		gain_health()
		display_health()
		critical_food()
		getting_hungry()
		show_fuel_left()
		if Global.single_player == false:
			$Food_bar_AnimatedSprite2D.global_position = Vector2(-65,-65)
			$Health_bar_AnimatedSprite2D.global_position = Vector2(-65, -20)
			$Fuel_left_AnimatedSprite2D.global_position = Vector2(570, -40)
			$Fuel_Left_Label.global_position = Vector2(630, -67)
		elif Global.single_player == true:
			play_panting_sound()
		if Global.game_over:
			return
		else:
			elapsed_time += delta
	elif game_over_run == true and Global.game_over != true: # checks if player 1 has died, but player 2 in multiplayer is still alive.
		elapsed_time += delta # then increases score as score increases even if one out of 2 players has died.

func handle_input():
	if Global.game_over != true:
		var input_direction = Vector2.ZERO
		if Global.single_player == true:
			if Input.is_action_pressed(\"move_up\") or Input.is_action_pressed(\"move_up_2\"): # if the input action \"move_up\" as set in project settings, and is activated by w or the up key, then:
				input_direction.y -= 1 # change the \"y\" direction by -1, setting the direction as moving up. 
			if Input.is_action_pressed(\"move_down\") or Input.is_action_pressed(\"move_down_2\"): #same as the last one, but for input action \"move_down\". 
				input_direction.y += 1 # change the \"y\" direction by +1 setting the direction to moving down. 
			if Input.is_action_pressed(\"move_left\") or Input.is_action_pressed(\"move_left_2\"): # Ok I think it's clear by now...
				input_direction.x -= 1 # change the \"x\" direction by -1, setting the direction to left. 
			if Input.is_action_pressed(\"move_right\") or Input.is_action_pressed(\"move_right_2\"): # last one! my fingers are getting sore! yep its definitely obvious by now, I don't need to add this surely...
				input_direction.x += 1 # and finally, change the \"x\" direction by +1, making  the direction right! :D
		else:
			if Input.is_action_pressed(\"move_up\"): # if the input action \"move_up\" as set in project settings, and is activated by w or the up key, then:
				input_direction.y -= 1 # change the \"y\" direction by -1, setting the direction as moving up. 
			if Input.is_action_pressed(\"move_down\"): #same as the last one, but for input action \"move_down\". 
				input_direction.y += 1 # change the \"y\" direction by +1 setting the direction to moving down. 
			if Input.is_action_pressed(\"move_left\"): # Ok I think it's clear by now...
				input_direction.x -= 1 # change the \"x\" direction by -1, setting the direction to left. 
			if Input.is_action_pressed(\"move_right\"): # last one! my fingers are getting sore! yep its definitely obvious by now, I don't need to add this surely...
				input_direction.x += 1 # and finally, change the \"x\" direction by +1, making  the direction right! :D
			
		# But wait! There's more!!!
		if input_direction != Vector2.ZERO: # if no input is detected...
			direction = input_direction.normalized() # ... keep the sprite moving in the same direction! :D
	


func move_and_animate(delta): # the function that codes the animations. 
	position += direction * speed * delta # the position of the sprite is equal to: The pre-existing position multiplied by the direction, so it moves the right way, the speed, so it moves the right amount, and delta, so that the speed moves in accordance to the time between frames, as opposed to the set speed at the start of the code.     
	position.x = clamp(position.x, min_x, max_x)
	position.y = clamp(position.y, min_y, max_y) 
	if direction.x > 0: # if the x direction variable is larger than 0, indicating that the character should move along the x axis, towards the right, then:
		if direction.y > 0: # check if y is greater than 0, which, as in many game programming platforms, (0,0) is the top left of the screen, so that the y-axis is reversed, means that the character will be moving right. As this is within the right section of the code, this means the sprite will move down right.
			$AnimatedSprite2D.play(\"move_down_right\") # as said before, down right.
		elif direction.y < 0: # check to see if player is moving left. (already explained twice)
			$AnimatedSprite2D.play(\"move_up_right\") # move it down left. (wow)
		else: # the only other alternative is if only D is being pressed, so the character is moving only right, so only play the right animation.
			$AnimatedSprite2D.play(\"move_right\") # so yeah move right.
	elif direction.x < 0: # if x is less than 0 however, you should be moving left.
		if direction.y > 0: # as mentioned, given the top left of the screen is (0,0), then y being greater than 0 means that the character is moving down. and because this is within the left section, down left.
			$AnimatedSprite2D.play(\"move_down_left\") # huzzah! move down left!
		elif direction.y < 0: # y is less than zero so moving up, and then left bc of the position.
			$AnimatedSprite2D.play(\"move_up_left\") # Huzzah again! move up left!
		else: # the only other alternative is that only left is being pressed, so therefore...
			$AnimatedSprite2D.play(\"move_left\") # move only left.
	else: # and finally! there are just 2 animation directions unaccounted for!!!
		if direction.y > 0: # only moving down... 
			$AnimatedSprite2D.play(\"move_down\") # moving down!!! YAA!!!! :D
		elif direction.y < 0: # and only moving up!!!
			$AnimatedSprite2D.play(\"move_up\") # UP!!!!
			
func animate_time_of_day():
	if Global.single_player:
		if (Global.day_and_night % 2) == 0: # if it is night:
			$Night_scene_AnimatedSprite2D.show() # show the night scene sprite.
		else: # if it is day:
			if daytime_process:
				return
			else:
				daytime_process = true # prevents this section from running multiple times, as it can only run the first time now. 
				$Night_scene_AnimatedSprite2D.hide() # hide the night scene sprite. 
				daytime_process = false # resets daytime_process to false so this code can run the next day.
	else:
		if (Global.day_and_night % 2) == 0:
			$PointLight2D.show()
		else:
			$PointLight2D.hide()
func food():
	if food_bars > 5:
		food_bars = 5
	elif food_bars == 5: # the variable can be between 5 and 0, each meaning food is one of 5 levels, 20% apart, respectively.
		$Food_bar_AnimatedSprite2D.play(\"100%\")
	elif food_bars == 4:
		$Food_bar_AnimatedSprite2D.play(\"80%\")
	elif food_bars == 3:
		$Food_bar_AnimatedSprite2D.play(\"60%\")
	elif food_bars == 2:
		$Food_bar_AnimatedSprite2D.play(\"40%\")
	elif food_bars == 1:
		$Food_bar_AnimatedSprite2D.play(\"20%\")
	elif food_bars == 0:
		$Food_bar_AnimatedSprite2D.play(\"CRITICAL!\")
	elif food_bars < 0:
		food_bars = 0
	else:
		pass
		

func critical_food():
	if food_bars == 0:
		# $Food_bar_AnimatedSprite2D.play(\"CRITICAL!\") # this one means 0%, player starts losing health.
		if is_losing_health == true:
			return
		else:
			is_losing_health = true
			$Food_bar_AnimatedSprite2D.play(\"CRITICAL!\") # this one means 0%, player starts losing health.
			# im going to create a timer node and use that to decrease the health, with it decreasing for every few seconds with critical food. 
			#print(\"test if this works\")
			await get_tree().create_timer(7.0).timeout
			#print (\"does it work?\")
			# now im going to create a health variable which will be local, and decrease once the 7 second timer ends, so that the health slowly decreases when food is critical.
			if food_bars == 0:
				health -= 1 # decrease health by 1 every 7 seconds .
				$Health_Decreased_AudioStreamPlayer.play()
				is_losing_health = false
			else:
				is_losing_health = false

			
			
func getting_hungry(): # MAYBE CHANGE THIS TO CORRESPOND TO THE DAY AND NIGHT INCREASING DIFFICULTY OVER TIME FOR \"LEVELS\"
	if touched_food == false: # There is a timer that starts right after a food is touched, which then reduces the food_bars, if its already timing, this should be skipped. 
		if is_losing_hunger == true: # This avoids multiple runs of the code.
			return
		else:
			is_losing_hunger = true
			food_wait_time = (25*(1-(Global.day_and_night * 0.05))) # ok so pretty much we multiply the Global.day_and_night variable by 0.05, and subtract this from 1, and multiply the resulting number by the original number of seconds, 25. 
			# so on the first night, this is the equation:
			# 0 * 0.05 = 0, 1 - 0 = 1, 25 * 1 = 25, therefore food_wait_time = 25 seconds. 
			# but on another random time, such as on the 5th day, when day_and_night = 9, 
			# 9 * 0.05 = 0.45, 1 - 0.45 = 0.55, 25 * 0.55 = 13.75, therefore the wait time would be 13.75 seconds. 
			# this section helps the game increase steadily in difficulty, providing an steadily increasing challenge to help excercise the user's brains!
			await get_tree().create_timer(food_wait_time).timeout
			if touched_food == false: # This ensures that during the timer, the player hasn't touched a food and started a new timer.
				food_bars -= 1
				is_losing_hunger = false
			else:
				is_losing_hunger = false
	else:
		return


func display_health():
	if health == 3:
		$Health_bar_AnimatedSprite2D.play(\"3_Hearts\")
	elif health == 2:
		$Health_bar_AnimatedSprite2D.play(\"2_Hearts\")
	elif health == 1:
		$Health_bar_AnimatedSprite2D.play(\"1_Heart\")
	elif health > 3:
		health = 3
		$Health_bar_AnimatedSprite2D.play(\"3_Hearts\")
	else:
		#position.x = 0 ; position.y = 0 # prevents the player from moving, allowing game over sprites to remain still.
		if game_over_run == true:
			return
		else:
			game_over_run = true
			$Dying_AudioStreamPlayer.play()
			if Global.single_player:
				game_over()
			else:
				Global.update_multiplayer_game_over(Global.multiplayer_game_over+1)
				$AnimatedSprite2D.hide()
				$PointLight2D.color = Color.TRANSPARENT
				print(Global.multiplayer_game_over)
				global_position = Vector2(-1, -1)
				Global.update_player_position(global_position)
				$Food_bar_AnimatedSprite2D.hide()
				$Health_bar_AnimatedSprite2D.hide()
				if Global.multiplayer_game_over == 2:
					multiplayer_game_over()
				else:
					return
			

func multiplayer_game_over():
	Global.game_over = true
	$AnimatedSprite2D.hide() ; $Food_bar_AnimatedSprite2D.hide() ; $Health_bar_AnimatedSprite2D.hide() ; 
	$Fuel_left_AnimatedSprite2D.hide() ; $Fuel_Left_Label.hide() ; 
	$PointLight2D.color = Color.TRANSPARENT
	$CollisionShape2D.set_deferred(\"disabled\", true)
	$Score.show() ; $Nights_survived.show()
	$Game_over_screen_AnimatedSprite2D.show()
	$Game_Over_Back_Button.show()
	$Game_over_screen_AnimatedSprite2D.scale = Vector2(10,10)
	$Game_Over_Back_Button.scale = Vector2(0.8,0.8) ; $Game_Over_Back_Button.global_position = Vector2(-50,-50)
	$Score.scale = Vector2(7,7) ; $Score.global_position = Vector2(430,420)
	$Nights_survived.scale = Vector2(7,7) ; $Nights_survived.global_position = Vector2(290, 500)
	$Game_over_screen_AnimatedSprite2D.global_position = Vector2(576, 324)
	$Game_Over_Back_Button.set_deferred(\"disabled\", false)
	
	calculate_score_and_nights_survived()
	
	$Score.text = \"SCORE: \"+ str(final_score)
	$Nights_survived.text = \"NIGHTS SURVIVED: \" + str(nights_survived)
	
	

func game_over():
	$Health_bar_AnimatedSprite2D.hide()
	$Game_over_screen_AnimatedSprite2D.show()
	$Night_scene_AnimatedSprite2D.hide()
	$Food_bar_AnimatedSprite2D.hide()
	$Game_Over_Back_Button.show()
	$Fuel_left_AnimatedSprite2D.hide()
	$Fuel_Left_Label.hide()
	
	calculate_score_and_nights_survived()
	
	$Score.text = \"SCORE: \"+ str(final_score)
	$Score.position = Vector2(-50,30)
	$Score.show()
	
	$Nights_survived.text = \"NIGHTS SURVIVED: \" + str(nights_survived)
	$Nights_survived.position = Vector2(-90, 50)
	$Nights_survived.show()
	$Game_Over_Back_Button.set_deferred(\"disabled\", false)
	Global.update_game_over(true)
	print(\"Game over function single player complete\")


func gain_health():
	if is_gaining_health == true:
		return
	is_gaining_health = true
	await get_tree().create_timer(30+(Global.day_and_night)).timeout # waits 30 seconds, plus 1 more second for he number of days and nights you've survived. This means that health regens on the first night every 30 seconds, then slower as the game progresses, increasing difficulty over time.
	if health < 3 and health != 0 and food_bars != 0: # makes sure that food isn't critical, as food cannot regen at critical, also ensures health doesn't regenerate after death, and health can't be more than 3.
		health += 1
		is_gaining_health = false
	else:
		return

func _on_body_entered(body):
	if body.is_in_group(\"Mobs\"):
		health -= 1
		$Health_Decreased_AudioStreamPlayer.play()
	elif body.is_in_group(\"Boss_mobs\"):
		health -= 3

func _on_area_entered(area):
	if area.is_in_group(\"Foods\"):
		food_bars += 1
		touched_food = true
		food_timer_num += 1
		var start_of_timer_num = food_timer_num
		food_wait_time = (25*(1-(Global.day_and_night * 0.05)))
		await get_tree().create_timer(food_wait_time).timeout
		if food_timer_num == start_of_timer_num:
			food_bars -= 1
			touched_food = false
		else:
			return
	elif area.is_in_group(\"Fuels\"):
		Global.update_fuel(fuel+1)
	else:
		pass


func _on_game_over_back_button_pressed():
	Global.update_game_over(false)
	Global.update_multiplayer_game_over(0)
	Global.update_day_and_night(0)
	get_tree().change_scene_to_file(\"res://Start_scene.tscn\")
	
func show_fuel_left():
	$Fuel_Left_Label.global_position = $Fuel_left_AnimatedSprite2D.global_position + Vector2(13, -6)
	if Global.game_over != true:
		if Input.is_action_just_pressed(\"show_fuel_left\"):
			showing_fuel_bar += 1
		if (Global.day_and_night % 2) == 0 and (showing_fuel_bar % 2) != 0:
			$Fuel_left_AnimatedSprite2D.show()
			$Fuel_Left_Label.show()
			var fuel_requirement = ((Global.day_and_night+2)/2)
			fuel_requirement = round(fuel_requirement)
			var fuel_left = fuel_requirement - fuel
			$Fuel_Left_Label.text = str(fuel_left)
		elif (Global.day_and_night % 2) == 0 and (showing_fuel_bar % 2) == 0:
			$Fuel_left_AnimatedSprite2D.hide()
			$Fuel_Left_Label.hide()
		else:
			$Fuel_Left_Label.hide()
			$Fuel_left_AnimatedSprite2D.hide()
	else:
		return


func play_panting_sound():
	if play_sound_called:
		return
	else:
		play_sound_called = true
		if (Global.day_and_night % 2) == 0:
			$Panting_AudioStreamPlayer.volume_db = -20
		else:
			$Panting_AudioStreamPlayer.volume_db = -40
		$Panting_AudioStreamPlayer.play()
		await $Panting_AudioStreamPlayer.finished
		play_sound_called = false

func calculate_score_and_nights_survived():
	if Global.day_and_night != 0:
		if (Global.day_and_night % 2) == 0:
			nights_survived = ((Global.day_and_night+2)/2)-1
		else:
			nights_survived = ((Global.day_and_night+1)/2)
	else:
		nights_survived = 0
	
	final_score = elapsed_time * 2 # this line of code helps prevent really low scores at the start of the game. 
	final_score = (final_score*final_score) / 5 # then this line makes the scores huge, then smaller, so it is more random than the time in seconds survived. 
	if nights_survived != 0:
		final_score *= nights_survived+1 # This section increases the final score majorly, for the number of nights survived. without this, someone who ran around in circles the whole time and stayed in the first night, dying of hunger,  could get the same score as someone who played 3 nights and died from mobs. also +1 because otherwise surviving 1 night multiplies by 1 which does nothing.
	else: pass
	final_score = round(final_score) # and this part rounds to a integer.
	# this entire part of code determining the score helps the score increase exponentially, which corresponds to the game's difficulty increasing exponentially, meaning a higher score for a harder part of the game played.
	# this means the score is a better reflection of the player's skill, than just the time they survived.
	
"

[sub_resource type="SpriteFrames" id="SpriteFrames_lw14p"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_itl3j")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}]

[sub_resource type="AtlasTexture" id="AtlasTexture_bm726"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_ntwp5"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_i5sve"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_d5rei"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 0, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_o5f68"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_a0cxj"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_2jfwf"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_gjq3s"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 100, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_3w7ch"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_jgv1f"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_cg0uf"]
atlas = ExtResource("1_1bvub")
region = Rect2(800, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_ow25q"]
atlas = ExtResource("1_1bvub")
region = Rect2(600, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_bse1t"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_joot5"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 200, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_etanf"]
atlas = ExtResource("1_1bvub")
region = Rect2(900, 300, 100, 100)

[sub_resource type="AtlasTexture" id="AtlasTexture_j0hla"]
atlas = ExtResource("1_1bvub")
region = Rect2(1100, 300, 100, 100)

[sub_resource type="SpriteFrames" id="SpriteFrames_c30tb"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bm726")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ntwp5")
}],
"loop": true,
"name": &"move_down",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_i5sve")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d5rei")
}],
"loop": true,
"name": &"move_down_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_o5f68")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a0cxj")
}],
"loop": true,
"name": &"move_down_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_2jfwf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gjq3s")
}],
"loop": true,
"name": &"move_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_3w7ch")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jgv1f")
}],
"loop": true,
"name": &"move_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_cg0uf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ow25q")
}],
"loop": true,
"name": &"move_up",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bse1t")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_joot5")
}],
"loop": true,
"name": &"move_up_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_etanf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_j0hla")
}],
"loop": true,
"name": &"move_up_right",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_lgbhs"]
radius = 12.0
height = 24.0

[sub_resource type="SpriteFrames" id="SpriteFrames_egunb"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_bkfbl")
}],
"loop": true,
"name": &"100%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_picw1")
}],
"loop": true,
"name": &"20%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("5_0drxs")
}],
"loop": true,
"name": &"40%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("6_fys3c")
}],
"loop": true,
"name": &"60%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("7_tbmkp")
}],
"loop": true,
"name": &"80%",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("8_8iksq")
}],
"loop": true,
"name": &"CRITICAL!",
"speed": 5.0
}]

[sub_resource type="SpriteFrames" id="SpriteFrames_s6qwr"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("9_g0dnn")
}],
"loop": true,
"name": &"1_Heart",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("10_xohd3")
}],
"loop": true,
"name": &"2_Hearts",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("11_chapm")
}],
"loop": true,
"name": &"3_Hearts",
"speed": 5.0
}]

[sub_resource type="SpriteFrames" id="SpriteFrames_gslcj"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("12_fbpde")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}]

[sub_resource type="SpriteFrames" id="SpriteFrames_kcc6s"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("13_naa4u")
}],
"loop": true,
"name": &"Fuel_Left",
"speed": 5.0
}]

[node name="Player" type="Area2D" groups=["Player"]]
z_index = 4
position = Vector2(582, 325)
scale = Vector2(0.5, 0.5)
script = SubResource("GDScript_v763d")

[node name="Game_over_screen_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
visible = false
z_index = 10
scale = Vector2(1.543, 1.543)
sprite_frames = SubResource("SpriteFrames_lw14p")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 8
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_c30tb")
animation = &"move_up_right"
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 13)
shape = SubResource("CapsuleShape2D_lgbhs")
metadata/_edit_group_ = true

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(-1, 0)
zoom = Vector2(5, 5)

[node name="Food_bar_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 11
position = Vector2(-188, -116)
scale = Vector2(0.1, 0.1)
sprite_frames = SubResource("SpriteFrames_egunb")
animation = &"CRITICAL!"

[node name="Health_bar_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 11
position = Vector2(-188, -100)
scale = Vector2(0.02, 0.02)
sprite_frames = SubResource("SpriteFrames_s6qwr")
animation = &"3_Hearts"

[node name="Night_scene_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 8
position = Vector2(0, 7)
scale = Vector2(8, 8)
sprite_frames = SubResource("SpriteFrames_gslcj")

[node name="Score" type="Label" parent="."]
z_index = 11
anchors_preset = -1
anchor_right = 0.586
anchor_bottom = 0.565
offset_left = -180.0
offset_top = 30.0
offset_right = 184.0
offset_bottom = 53.0

[node name="Nights_survived" type="Label" parent="."]
z_index = 11
anchors_preset = -1
anchor_right = 0.586
anchor_bottom = 0.565
offset_left = -180.0
offset_top = 30.0
offset_right = 184.0
offset_bottom = 53.0

[node name="PointLight2D" type="PointLight2D" parent="."]
visible = false
z_index = 12
scale = Vector2(0.1, 0.1)
color = Color(1, 1, 1, 0.254902)
energy = 4.0
texture = ExtResource("12_mjkwy")

[node name="Game_Over_Back_Button" type="Button" parent="."]
z_index = 11
offset_left = -230.0
offset_top = -130.0
offset_right = 278.0
offset_bottom = 158.0
scale = Vector2(0.15, 0.15)
icon = ExtResource("13_11oj3")
flat = true

[node name="Fuel_Left_Label" type="Label" parent="."]
z_index = 12
offset_left = 180.0
offset_top = -122.0
offset_right = 220.0
offset_bottom = -99.0
theme_override_colors/font_color = Color(0, 0, 0, 1)

[node name="Fuel_left_AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
z_index = 11
position = Vector2(156, -110)
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_kcc6s")
animation = &"Fuel_Left"

[node name="Panting_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("16_ulpre")
volume_db = -20.0

[node name="Dying_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("17_5xq42")
volume_db = -40.0

[node name="Health_Decreased_AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("18_mefyr")
volume_db = -20.0

[connection signal="area_entered" from="." to="." method="_on_area_entered"]
[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="pressed" from="Game_Over_Back_Button" to="." method="_on_game_over_back_button_pressed"]
